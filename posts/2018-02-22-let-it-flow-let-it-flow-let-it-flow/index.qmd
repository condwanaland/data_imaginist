---
title: Let it flow, let it flow, let it flow
description: "particles, my R port of the d3-force algorithm, is now on CRAN — read on to find out why you should care!"
date: '2018-02-22'
slug: let-it-flow-let-it-flow-let-it-flow
categories: 
  - simulation
  - particles
  - announcement
  - network
card-style: summary_large_image
image: "/assets/img/particles_logo.png"
aliases: 
  - ../../2018/let-it-flow-let-it-flow-let-it-flow/index.html
---

<p>![](/assets/img/particles_logo_small.png){style="width:50%;max-width:200px;display:block;margin-left:auto;margin-right:auto" width="650"}</p>

<p>I got a new package on CRAN! It's called <code>particles</code> and it sits right in the perfect intersection of fun, cool, and useful. If you don't believe me, have a look at the Venn diagram below --- charts don't lie!</p>

::: figure
![](/assets/img/particles_venn.png)
:::

::: {#so-what-is-this-all-about .section .level2}
<h2>So what is this all about?</h2>

<p><code>particles</code> is an R implementation of The <code>d3-force</code> algorithm developed by Mike Bostock and can be used to simulate many different types of interactions between particles and the world. While <code>particles</code> can be used as a simple physics engine it has not been developed with this in mind and accuracy, in terms of how well it behaves like the physical world, has not been a main priority during development.</p>

<p>In it's essence <code>particles</code> provides a way of defining a set of spherical or dimensionless object, potentially connected with each other, a world governed by a set of rules, and then set the objects free in the world and see how they behaves. The use cases for this are many, and include network visualisation, generative art, animation, and - most importantly - fun!</p>

<p><code>particles</code> is build on top of <code>tidygraph</code> and uses it as the main representation of the particles and their relations. Even so, there is no need to be experienced in network analysis and manipulation. <code>particles</code> can easily be used without any of the objects being connected with each other and the objects can thus be thought of as stored in a simple data frame.</p>
:::

::: {#setting-up-a-simulation .section .level2}
<h2>Setting up a simulation</h2>

<p>Central to the use of <code>particles</code> is the simulation, that is, setting the objects free in the world you've defined. There are several parts to a simulation:</p>

<ul>

<li>A description of the objects you wish to simulate</li>

<li>An initialisation of the position and velocity of the objects</li>

<li>A specification of how the simulation progress over time (e.g. a cooling, letting the simulation slowly stabilise)</li>

<li>A number of forces and constraints that governs how the objects behave in the system</li>

<li>A specification of how many iterations the simulation should evolve</li>

</ul>

<p>All of these steps can be specified using dedicated verbs and piped together. Let's look at an example:</p>

```{=html}
<pre class="r"><code>library(particles)
library(tidygraph)

sim &lt;- create_ring(10) %&gt;% 
  simulate(velocity_decay = 0.6, setup = petridish_genesis(vel_max = 0)) %&gt;% 
  wield(link_force) %&gt;% 
  wield(manybody_force) %&gt;% 
  impose(polygon_constraint, 
         polygon = cbind(c(-100, -100, 100, 100), c(-100, 100, 100, -100))) %&gt;% 
  evolve(100)</code></pre>
```
<p>So what's going on here? First we create a <code>tbl_graph</code> using the <code>create_ring()</code> function from <code>tidygraph</code>, which basically creates a circular graph. Then we use it to create a simulation using the <code>simulate()</code> function. In there we can set how fast the velocity decays over time, as well how particles should be initialised. We use the <code>petridish_genesis()</code> to place the particles randomly on a disc. Then we begin to define the forces that makes up the simulation using the <code>wield()</code> function. We first add a link force that makes connected particles attract each other, and then a manybody force that pushes particles away from each others (unless the strength is set to a positive value in which case it works like gravity, attracting particles to each other). We also adds a constraint to the system using the <code>impose()</code> function. Here we defines that particles must remain inside a 200x200 square.</p>

<blockquote>

<p>The distinction between forces and constraints are a bit vague but generally forces will adjust the velocity of particles while constraints defines hard boundaries for the position and velocity of the particles.</p>

</blockquote>

<p>Lastly we set the simulation to run for 100 iterations. If we did not specify a number of iterations the simulation would run until it had cooled down (which happens after 300 iterations using the default settings). We now have a simulation that has progressed a bit:</p>

```{=html}
<pre class="r"><code>sim
#&gt; A particle simulation:
#&gt; * 10 particles
#&gt; * 2 Forces
#&gt;   - link_force
#&gt;   - manybody_force
#&gt; * 1 Constraints
#&gt;   - polygon_constraint
#&gt; * 100 Evolutions</code></pre>
```
<p>We could say that that was it and maybe plot it:</p>

```{=html}
<pre class="r"><code>library(ggraph)
ggraph(as_tbl_graph(sim)) + 
  geom_edge_link() + 
  geom_node_point() + 
  theme_graph()</code></pre>
```
<p><img src="/post/2018-02-22-let-it-flow-let-it-flow-let-it-flow_files/figure-html/unnamed-chunk-4-1.png" width="672"/></p>

<p>(as we can see the simulation has almost unwinded the ring from its initial random state)</p>

<p>We could also change the simulation somehow and iterate some more on it:</p>

```{=html}
<pre class="r"><code>sim &lt;- sim %&gt;% 
  unwield(2) %&gt;% 
  wield(manybody_force, strength = 30) %&gt;% 
  reheat(1) %&gt;% 
  evolve()

ggraph(as_tbl_graph(sim)) + 
  geom_edge_link() + 
  geom_node_point() + 
  theme_graph()</code></pre>
```
<p><img src="/post/2018-02-22-let-it-flow-let-it-flow-let-it-flow_files/figure-html/unnamed-chunk-5-1.png" width="672"/></p>

<p>Let's unpack this. First we remove the second force (the repulsive manybody force) and then we add a new manybody force that attracts instead (these two steps could also have been done in one using <code>rewield()</code>). Then we heat up the system again (setting alpha back to the original value) and let it evolve until it has cooled down. The result is a struggle between the link force and the manybody force over dominance of the system.</p>
:::

::: {#tidy-eval .section .level2}
<h2>Tidy eval</h2>

<p>Many of the different forces and constraints let you set parameters on a per particle or per connection basis - e.g. for the link force discussed above we could let the strength of the force be related to the weight of the edge. <code>particles</code> let you reference node and edge variables directly when specifying the force or constraint, e.g.</p>

```{=html}
<pre class="r"><code>sim &lt;- play_islands(3, 10, 0.6, 3) %&gt;% 
  mutate(group = group_infomap()) %&gt;% 
  activate(edges) %&gt;% 
  mutate(weight = ifelse(.N()$group[to] == .N()$group[from], 1, 0.25)) %&gt;% 
  simulate() %&gt;% 
  wield(link_force, strength = weight, distance = 10/weight) %&gt;% 
  evolve()

ggraph(as_tbl_graph(sim)) + 
  geom_edge_link(aes(width = weight), alpha = 0.3, lineend = &#39;round&#39;) + 
  geom_node_point() + 
  theme_graph() + 
  theme(legend.position = &#39;none&#39;)</code></pre>
```
<p><img src="/post/2018-02-22-let-it-flow-let-it-flow-let-it-flow_files/figure-html/unnamed-chunk-6-1.png" width="672"/></p>

<p>The nice thing about using node and edge variables is that <code>particles</code> keeps track of them and if you change them the force will get retrained:</p>

```{=html}
<pre class="r"><code>sim &lt;- sim %&gt;% 
  activate(edges) %&gt;% 
  mutate(weight = 1) %&gt;% 
  reheat(1) %&gt;% 
  evolve()

ggraph(as_tbl_graph(sim)) + 
  geom_edge_link(aes(width = weight), alpha = 0.3, lineend = &#39;round&#39;) + 
  geom_node_point() + 
  theme_graph() +
  theme(legend.position = &#39;none&#39;)</code></pre>
```
<p><img src="/post/2018-02-22-let-it-flow-let-it-flow-let-it-flow_files/figure-html/unnamed-chunk-7-1.png" width="672"/></p>

<p>Consult the documentation of each force and constraint to see which parameters that are tidy evaled.</p>

<blockquote>

<p>Note that we are able to manipulate the underlying <code>tbl_graph</code> directly using <code>active()</code>, <code>mutate()</code>, and <code>filter()</code> - <code>particles</code> defines a subset of the verbs defined in <code>tidygraph</code>/<code>dplyr</code></p>

</blockquote>
:::

::: {#iteration-callback .section .level2}
<h2>Iteration callback</h2>

<p>Sometimes you are more interested in the process than the end point. In that case you might want to look at the state of the simulation at each step it goes through. Luckily, the <code>evolve()</code> function comes with a powerful callback mechanism that allows you to do all sorts of things. If the callback function returns a simulation object it will replace the current simulation, otherwise the return value will be discarded and the side-effects, such as plots, will be the only effect of it. As you can imagine you can do many things with this capability, such as removing or adding new particles and connections, or changing forces midway. If the callback plots the current state it can be used directly with the <code>animation</code> package to produce animated views of your simulation. Lastly, it can be used to record the state so the it can easily be retrieved later on. For this you can use the predefined <code>record()</code> function:</p>

```{=html}
<pre class="r"><code>volcano_field &lt;- (volcano - min(volcano)) / diff(range(volcano)) * 2 * pi
sim &lt;- create_empty(1000) %&gt;% 
  simulate(alpha_decay = 0, setup = aquarium_genesis(vel_max = 0)) %&gt;% 
  wield(reset_force, xvel = 0, yvel = 0) %&gt;% 
  wield(field_force, angle = volcano_field, vel = 0.1, xlim = c(-5, 5), ylim = c(-5, 5)) %&gt;% 
  evolve(100, record)

traces &lt;- data.frame(do.call(rbind, lapply(sim$history, position)))
names(traces) &lt;- c(&#39;x&#39;, &#39;y&#39;)
traces$age &lt;- rep(100:1, each = 1000)
traces$particle &lt;- rep(1:1000, 100)

ggplot(traces) +
  geom_path(aes(x, y, group = particle, alpha = age), size = 0.1) + 
  theme_void() + 
  theme(legend.position = &#39;none&#39;)</code></pre>
```
<p><img src="/post/2018-02-22-let-it-flow-let-it-flow-let-it-flow_files/figure-html/unnamed-chunk-8-1.png" width="672"/></p>

<p>In this example we define a field force based on our beloved volcano data set. The field force applies a velocity based on a given vector field. We define that the simulation has no cooling (<code>alpha_decay = 0</code>) and that the particles should be placed randomly in a rectangle. Besides the field force we also add a reset force that sets the velocity to zero in each iteration so that the vector field does not accumulate. When all this is done we run the simulation for 100 iterations and saves each state with the <code>record()</code> function.</p>

<p>To get the plot we extract the positions from each iteration and simply plots the trajectory of each particle.</p>

<p>But lines are all fine and great --- let's see an animation instead:</p>

```{=html}
<pre class="r"><code>create_empty(1000) %&gt;% 
  simulate(alpha_decay = 0, setup = aquarium_genesis(vel_max = 0)) %&gt;% 
  wield(reset_force, xvel = 0, yvel = 0) %&gt;% 
  wield(field_force, angle = volcano_field, vel = 0.1, xlim = c(-5, 5), ylim = c(-5, 5)) %&gt;% 
  evolve(100, function(sim) {
    p &lt;- ggplot(as_tibble(sim)) + 
      geom_point(aes(x, y), size = 0.25) + 
      theme_void()
    plot(p)
  })</code></pre>
```
<p><img src="/post/2018-02-22-let-it-flow-let-it-flow-let-it-flow_files/figure-html/unnamed-chunk-9.gif" width="672"/></p>

```{=html}
<pre><code>#&gt; A particle simulation:
#&gt; * 1000 particles
#&gt; * 2 Forces
#&gt;   - reset_force
#&gt;   - field_force
#&gt; * 0 Constraints
#&gt; * 100 Evolutions</code></pre>
```
:::

::: {#summing-up .section .level2}
<h2>Summing up</h2>

<p>Hopefully you have gotten a taste of what is possible with <code>particles</code>, but there are many more options and possibilities. The package is developed both for practical use and for having fun --- with luck you can do both simultaneously.</p>
:::
