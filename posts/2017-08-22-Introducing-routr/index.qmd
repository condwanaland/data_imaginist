---
title: "Introducing routr - Routing of HTTP and WebSocket in R"
description: "I'm happy to finally be able to announce that routr is on CRAN, thus completing the standard fiery stack trifecta"
date: '2017-08-22'
slug: 'Introducing-routr'
categories: [routr, fiery, webserver]
card-style: summary_large_image
image: "/assets/img/routr_logo.png"
aliases: 
  - ../../2017/Introducing-routr/index.html
---

<p><img src="/assets/img/routr_logo_small.png" align="right" style="width:50%;max-width:200px"/></p>

<p><code>routr</code> is now available on CRAN, and I couldn't be happier. It's release marks the completion of an idea that stretches back longer than my attempts to bring network visualization and <code>ggplot2</code> together (<a href="../2016-10-31-Becoming-the-intern">see this post for ref</a>). While my PhD was still concerned with proteomics a began developing GUI's based on <code>shiny</code> for managing different parts of the proteomics workflow. I soon came to realize that I was spending an inordinate amount of time battling <code>shiny</code> itself because I wanted more than it was meant for. Thus began my idea of creating an expressive and powerful web server framework for R in the veins of express.js and the likes that could be made to do anything. The idea lingered in my head for a long time and went through several iterations until I finally released <code>fiery</code> in the late summer of 2016. <code>fiery</code> was never meant to stand alone though and I boldly proclaimed that <code>routr</code> would come next. That didn't seem to happen. I spend most of the following year developing tools for visualization and network analysis while having guilty consciousness about the project I'd put on hold. Fortunately I've been able to put in some time for taking up development for the <code>fiery</code> ecosystem once again, so without further ado...</p>

::: {#routr .section .level2}
<h2>routr</h2>

<p>While I spend some time in the introduction to talk about the whole development path of <code>fiery</code>, I would like to start here with saying that <code>routr</code> is a server agnostic tool. Sure, I've build it for use with <code>fiery</code> but I've been very deliberate in making it completely independent of it, except for the code that is involved in the <code>fiery</code> plugin functionality. So, you're completely free to use <code>routr</code> with whatever server framework you wish (e.g. hook it directly to an <code>httpuv</code> instance). But how does it work? read on...</p>

::: {#the-design .section .level3}
<h3>The design</h3>

<p><code>routr</code> is basically build up of two different concepts: <em>routes</em> and <em>route stacks</em>. Routes are a collection of handlers attached to specific HTTP request methods (e.g. GET, POST, PUT) and paths. When a request lands at a route one of the handlers is chosen and called, based on the nature of the request. A route stack is a collection of routes. When a request lands at a route stack it will pass it through all the routes it contains sequentially, potentially stopping if one of the handlers signals it. In the following these two concepts will be discussed in detail.</p>
:::

::: {#routes .section .level3}
<h3>Routes</h3>

<p>In its essence a router is a decision mechanism for redirection HTTP requests into the correct handler function based on the request URL. It makes sure that e.g. requests for <code>http://example.com/info</code> ends up in a different handler than <code>http://example.com/users/thomasp85</code>. This functionality is encapsulated in the <code>Route</code> class. The basic use is illustrated below:</p>

```{=html}
<pre class="r"><code>library(routr)
route &lt;- Route$new()
route$add_handler(&#39;get&#39;, &#39;/info&#39;, function(request, response, keys, ...) {
  response$status &lt;- 200L
  response$body &lt;- list(h1 = &#39;This is a test server&#39;)
  TRUE
})
route$add_handler(&#39;get&#39;, &#39;/users/thomasp85&#39;, function(request, response, keys, ...) {
  response$status &lt;- 200L
  response$body &lt;- list(h1 = &#39;This is the user information for thomasp85&#39;)
  TRUE
})
route</code></pre>
```
```{=html}
<pre><code>## A route with 2 handlers
## get: /users/thomasp85
##    : /info</code></pre>
```
<p>Let's walk through what happened here. First we created a new <code>Route</code> object and then we added two handlers to it, using the eponymous <code>add_handler()</code> method. Both of the handlers responds to the <code>GET</code> method, but differs in the path they are listening for. <code>routr</code> uses <code>reqres</code> under the hood so each handler method is passed a <code>Request</code> and <code>Response</code> pair (we'll get back to the <code>keys</code> argument). Lastly, each handler must return either <code>TRUE</code> indicating that the next route should be called, or <code>FALSE</code> indicating no further routes should be called. As the request and response objects are <code>R6</code> objects any changes to them will be kept outside of the handler and there is thus no need to return them.</p>

<p>Now, consider the situation where I have build my super fancy web service into a thriving business with millions of users - would I need to add a handler for every user? No. This would be a case for a parameterized path.</p>

```{=html}
<pre class="r"><code>route$add_handler(&#39;get&#39;, &#39;/users/:user_id&#39;, function(request, response, keys, ...) {
  response$status &lt;- 200L
  response$body &lt;- list(h1 = paste0(&#39;This is the user information for &#39;, keys$user_id))
  TRUE
})
route</code></pre>
```
```{=html}
<pre><code>## A route with 3 handlers
## get: /users/thomasp85
##    : /users/:user_id
##    : /info</code></pre>
```
<p>As can be seen, prefixing a path element with <code>:</code> will make it into a variable, matching anything that is put in there and adds it as an element to the <code>keys</code> argument. Paths can contain as many variable elements as wanted in order to reuse handlers as efficiently as possible.</p>

<p>There's a last piece of path functionality left to discuss: The wildcard. While parameterized path elements only matches as single element (e.g. <code>/users/:user_id</code> will match <code>/users/johndoe</code> but not <code>/users/johndoe/settings</code>) the wildcard matches anything. Let's try one of these:</p>

```{=html}
<pre class="r"><code>route$add_handler(&#39;get&#39;, &#39;/setting/*&#39;, function(request, response, keys, ...) {
  response$status_with_text(403L) # Forbidden
  FALSE
})
route$add_handler(&#39;get&#39;, &#39;/*&#39;, function(request, response, keys, ...) {
  response$status &lt;- 404L
  response$body &lt;- list(h1 = &#39;We really couldn\&#39;t find your page&#39;)
  FALSE
})
route</code></pre>
```
```{=html}
<pre><code>## A route with 5 handlers
## get: /users/thomasp85
##    : /users/:user_id
##    : /setting/*
##    : /info
##    : /*</code></pre>
```
<p>Here we add two new handlers, one preventing access to anything under the <code>/settings</code> location, and one implementing a custom <code>404 - Not found</code> page. Both returns <code>FALSE</code> as they are meant to prevent any further processing.</p>

<p>Now there's a slight pickle with the current situation. If I ask for <code>/users/thomasp85</code> it can match three different handlers: <code>/users/thomasp85</code>, <code>/users/:user_id</code>, and <code>/\*</code>. Which to chose? <code>routr</code> decides on the handler based on path specificity, where handlers are prioritized based on number of elements in the path (the more the better), number of parameterized elements (the less the better), and existence of wildcards (better with none). In the above case it means that the <code>/users/thomasp85</code> will be chosen. The handler priority can always be seen when printing the <code>Route</code> object.</p>

<p>The request method is less complicated than the path. It simply matches the method used in the request, ignoring the case. There's one special method: <code>all</code>. This one will match any method, but only if a handler does not exist for that specific method.</p>
:::

::: {#route-stacks .section .level3}
<h3>Route Stacks</h3>

<p>Conceptually, route stacks are much simpler than routes, in that they are just a sequential collection of routes, with the means to pass requests through them. Let's create some additional routes and collect them in a <code>RouteStack</code>:</p>

```{=html}
<pre class="r"><code>parser &lt;- Route$new()
parser$add_handler(&#39;all&#39;, &#39;/*&#39;, function(request, response, keys, ...) {
  request$parse(reqres::default_parsers)
})
formatter &lt;- Route$new()
formatter$add_handler(&#39;all&#39;, &#39;/*&#39;, function(request, response, keys, ...) {
  response$format(reqres::default_formatters)
})

router &lt;- RouteStack$new()
router$add_route(parser, &#39;request_prep&#39;)
router$add_route(route, &#39;app_logic&#39;)
router$add_route(formatter, &#39;response_finish&#39;)
router</code></pre>
```
```{=html}
<pre><code>## A RouteStack containing 3 routes
## 1: request_prep
## 2: app_logic
## 3: response_finish</code></pre>
```
<p>Now, when our router receives a request it will first pass it to the parser route and attempt to parse the body. If it is unsuccessful it will abort (the <code>parse()</code> method returns <code>FALSE</code> if it fails), if not it will pass the request on to the route we build up in the prior section. If the chosen handler returns <code>TRUE</code> the request will then end up in the formatter route and the response body will be formatted based on content negotiation with the request. As can be seen route stacks are an effective way to extract common functionality into well defined handlers.</p>

<p>If you're using <code>fiery</code>. <code>RouteStack</code> objects are also what will be used as plugins. Whether to use the router for <code>request</code>, <code>header</code>, or <code>message</code> (WebSocket) events is decided by the <code>attach_to</code> field.</p>

```{=html}
<pre class="r"><code>app &lt;- fiery::Fire$new()
app$attach(router)
app</code></pre>
```
```{=html}
<pre><code>## 🔥 A fiery webserver
## 🔥  💥   💥   💥
## 🔥           Running on: 127.0.0.1:8080
## 🔥     Plugins attached: request_routr
## 🔥 Event handlers added
## 🔥              request: 1</code></pre>
```
:::
:::

::: {#predefined-routes .section .level2}
<h2>Predefined routes</h2>

<p>Lastly, <code>routr</code> comes with a few predefined routes, which I will briefly mention: The <code>ressource_route</code> maps files on the server to handlers. If you wish to serve static content in some way, this facilitates it, and takes care of a lot of HTTP header logic such as caching. It will also automatically serve compressed files if they exist and the client accepts them:</p>

```{=html}
<pre class="r"><code>static_route &lt;- ressource_route(&#39;/&#39; = system.file(package = &#39;routr&#39;))
router$add_route(static_route, &#39;static&#39;, after = 1)
router</code></pre>
```
```{=html}
<pre><code>## A RouteStack containing 4 routes
## 1: request_prep
## 2: static
## 3: app_logic
## 4: response_finish</code></pre>
```
<p>Now, you can get the package description file by visiting <code>/DESCRIPTION</code>. If a file is found it will return <code>FALSE</code> in order to simply return the file. If nothing is found it will return <code>TRUE</code> so that other routes can decide what to do.</p>

<p>If you wish to limit the size of requests, you can use the <code>sizelimit_route</code> and e.g. attach it to the <code>header</code> event in a <code>fiery</code> app, so that requests that are too big will get rejected before the body is fetched.</p>

```{=html}
<pre class="r"><code>sizelimit &lt;- sizelimit_route(10 * 1024^2) # 10 mb
reject_router &lt;- RouteStack$new(size = sizelimit)
reject_router$attach_to &lt;- &#39;header&#39;
app$attach(reject_router)
app</code></pre>
```
```{=html}
<pre><code>## 🔥 A fiery webserver
## 🔥  💥   💥   💥
## 🔥           Running on: 127.0.0.1:8080
## 🔥     Plugins attached: request_routr
## 🔥                       header_routr
## 🔥 Event handlers added
## 🔥               header: 1
## 🔥              request: 1</code></pre>
```
:::

::: {#wrapping-up .section .level2}
<h2>Wrapping up</h2>

<p>As I started by saying, the release of <code>routr</code> marks a point of maturity for my <code>fiery</code> ecosystem. I'm extremely happy with this, but it is in no way the end of development. I will pivot to working on more specialized plugins now concerned with areas such as security and scalability, but the main approach to building <code>fiery</code> server side logic is now up and running - I hope you'll take it for a spin.</p>
:::
