{
  "hash": "0caaccf183cb558a18d76264989ade37",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: A small patch of free features\ndescription: >\n  patchwork 1.2.0 is out with two outstanding new features. Read on to learn more\ndate: '2024-01-08'\ncard-style: summary_large_image\nimage: /assets/img/patchwork_logo.png\ncategories:\n  - patchwork\n  - announcement\n  - package\n---\n\n\nWhat is that? Another blog post not even a month after the last? This feels like 2017. Maybe I'm a bit extra attentive because I've had fun porting over my blog to quarto and also finally building a proper [site for my generative art](https://thomaslinpedersen.art) rather than lumping it into my R/OSS blog. Or maybe I just finally have interesting to share for the first time in a while...\n\nThat *interesting* thing today is a new release of [patchwork](https://patchwork.data-imaginist.com) — my package for easily combining multiple plots into complex and well-aligned compositions. It is not the grandest of releases — after all the package does what it does well — but it does provide two new features that I've been looking forward to:\n\n## There can be only one (axis)\n\nOne of the features in patchwork I'm particularly fond of is it's ability to collect and de-duplicate legends. It is one of those touches that makes the final composition feel like a whole. Missing from this has been a similar function for axes. This has been even more glaring because we are used to de-duplicated axes from faceted plots and not having that in patchwork felt wrong. I always intended on adding this but never got around to it but thankfully [Teun van den Brand](https://github.com/teunbrand) took a stab at it and filled the gap.\n\nThis new functionality is two-fold as it is split up in axes and axis titles (though the setting for axis titles defaults to that for axes so you can usually get by only setting it for axes).\n\nConsider these two plots:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\nlibrary(ggplot2)\n\nlibrary(ggplot2)\np1 <- ggplot(mtcars) + \n  geom_point(aes(mpg, disp)) + \n  ggtitle('Plot 1')\n\np2 <- ggplot(mtcars) + \n  geom_boxplot(aes(gear, disp, group = gear)) + \n  ggtitle('Plot 2')\n\np1 + p2\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nAs we can see they share the exact same y-axis and you might want to avoid the visual clutter of keeping the axis of the rightmost plot. Of course you could remove it through theming, setting the relevant theme elements to `element_blank()`. But that is such a hassle! Using the axis collecting is much easier:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 + p2 + plot_layout(axes = \"collect\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nIf you like the clarity of the axis but prefer to not keep the title, you use the `axis_titles` argument instead\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 + p2 + plot_layout(axis_titles = \"collect\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nTitles are collected if they are identical and the same is true for axes. This means that if you have two plots showing the same on the y-axis but with different ranges you can collect the titles but not the axis\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 + p2 + coord_cartesian(ylim = c(100, 300)) + plot_layout(axes = \"collect\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nThere is no facility to align the range of axes across plots so you'd still need to keep an eye on that. Still, you can always use `&` to apply the same coordinate system or scale to all plots in a patchwork so it should be relatively easy to line up plots.\n\nOne difference from the legend collection is that collecting axes only works for plots in the same nesting level. There are reasons for this, mainly my sanity level and capacity to sleep at night. Still, it means that one should be aware of the \"hidden\" nesting that can occur when using `/` and `|` for composition:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 + (p1 | p2) + plot_layout(axes = \"collect\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nA better approach for this would be to keep the same nesting level but use the `widths` argument to get the same look\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 + p1 + p2 + plot_layout(widths = c(2, 1, 1), axes = \"collect\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nThe attentive reader will observe that apart from \"fixing\" the problem at hand, something else happened to the plot. The middle plot suddenly lost it's x-axis title and the x-axis title of the left plot got moved somewhat to the right. This is because axis title collecting works in both directions, i.e. if adjacent axis titles are identical they will get merged and the final title will occupy the full area of the merged ones. The effect may be more clear in a simpler layout:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 / p2 + plot_layout(axis_titles = \"collect\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nFor the prior plot, if we would like to avoid this behavior because it is not obvious which x-axis title the middle plot relates to, we can set the collecting to only happen in one direction\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 + p1 + p2 + plot_layout(widths = c(2, 1, 1), axes = \"collect_y\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Being free from constraint\n\nThe other feature I'll discuss will probably make a lot of people happy. The number of questions about how to *not* align plots are numerous and usually comes down to plots with excessively long y-axis labels (sorry for keeping with the mtcars dataset — I know we got it figured out quite well at this point):\n\n\n::: {.cell}\n\n```{.r .cell-code}\np3 <- ggplot(mtcars) +\n  geom_bar(aes(y = factor(gear), fill = factor(gear))) +\n  scale_y_discrete(\n    \"\",\n    labels = c(\"3 gears are often enough\",\n               \"But, you know, 4 is a nice number\",\n               \"I would def go with 5 gears in a modern car\")\n  )\np3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nWe can see how such a plot could mess up a composition\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 / p3\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nMy answer to these questions/issues has always been to use `wrap_elements()` which, to be fair, gets the job done OK'ish\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 / wrap_elements(plot = p3)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nHowever, there are some shortcomings to this approach. First, it is pretty verbose and not very descriptive of what it does/what your intent is. This is not the end of the world, but the API of patchwork is pretty great (IMHO) so it feels like a bad concession to give all that up here. Second, using `wrap_elements()` \"freezes\" the plot inside it, so you can no longer modify it, e.g. with `&` or through guide collecting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 / wrap_elements(plot = p3) + plot_layout(guides = \"collect\") & theme_dark()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nAnother thing is that the plot margin is part of the plot that gets inserted into the plot region. If we remove the legend and increase the margin we can see an annoying misalignment between the right edges of the plots:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 / wrap_elements(plot = p3 + theme(plot.margin = margin(20, 20, 20, 20), legend.position = \"none\"))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\nThat was a lot of dunking on `wrap_elements()`. This is mainly because it was the wrong tool for the job, not because there is anything particularly wrong with it as is. No matter, we now have the right tool:\n\n\n::: {.cell}\n\n```{.r .cell-code}\np1 / free(p3) + plot_layout(guides = \"collect\") & theme_dark()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nThere is not much more to it. Wrap a plot in `free()` if you want to forego the alignment that patchwork performs and it will do exactly that without getting in the way of the other functionality in the patchwork.\n\nAnd now it is time to leave mtcars alone. Happy plotting!\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}