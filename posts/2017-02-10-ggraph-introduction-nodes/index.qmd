---
title: "Introduction to ggraph: Nodes"
description: "In the second post in this series of ggraph introductions I will dive into how nodes are drawn"
date: '2017-02-10'
slug: 'ggraph-introduction-nodes'
categories: [ggraph, visualization]
card-style: summary_large_image
image: "/assets/img/ggraph_logo.png"
aliases: 
  - ../../2017/ggraph-introduction-nodes/index.html
---

<p>This is the second post in my series of <code>ggraph</code> introductions. The <a href="../2017-02-06-ggraph-introduction-layouts">first</a> post introduced the concept of layouts, which is simply a specification on how nodes should be placed on a plane. This post will dive into how the nodes are drawn, once a layout has been calculated.</p>

::: {#nodes .section .level2}
<h2>Nodes</h2>

<p>Nodes in a network are the entities that are connected. Sometimes these are also referred to as vertices, but <code>ggraph</code> has opted for this nomenclature and use it consistently. While the nodes in a graph are the abstract concepts of entities, and the layout is their physical placement, the node geoms is the visual manifestation of the entities. Conceptually one can simply think of it in terms of a scatter plot --- the layout provides the x, and y coordinates and these can be used to draw nodes in different ways in the plotting window. Actually, due to the design of <code>ggraph</code> the standard <em>scatterplot-like</em> geoms from <code>ggplot2</code> can be used directly for plotting nodes:</p>

```{=html}
<pre class="r"><code>library(ggraph)
library(igraph)
gr &lt;- graph_from_data_frame(highschool)

ggraph(gr, layout = &#39;kk&#39;) + 
    geom_point(aes(x=x, y=y))</code></pre>
```
<p><img src="/post/2017-02-10-ggraph-introduction-nodes_files/figure-html/unnamed-chunk-2-1.png" width="672"/></p>

<p>The reason this works is that, as discussed in the previous post, layouts return a <code>data.frame</code> of node positions and metadata and this is used as the default plot data:</p>

```{=html}
<pre class="r"><code>head(create_layout(gr, layout = &#39;kk&#39;))
#&gt;            x          y name ggraph.orig_index circular ggraph.index
#&gt; 1  0.2782438  2.4944195    1                 1    FALSE            1
#&gt; 2  0.1365268  3.1063039    2                 2    FALSE            2
#&gt; 3  0.9329938  3.2168940    3                 3    FALSE            3
#&gt; 4 -2.5457734 -1.5139415    4                 4    FALSE            4
#&gt; 5 -2.8447634 -0.2267242    5                 5    FALSE            5
#&gt; 6 -2.9897376  1.7369304    6                 6    FALSE            6</code></pre>
```
::: {#geom_node_ .section .level3}
<h3><code>geom_node\_\*()</code></h3>

<p>While usage of the default <code>ggplot2</code> is absolutely allowed, <code>ggraph</code> comes with its own set of node geoms. Many of these are direct translations of <code>ggplot2</code> own geoms like <code>geom_point()</code> so one could wonder why bother to use them.</p>

<p>The first reason is to provide clear code. It is not apparent anywhere that the standard geoms are addressing the nodes and using <code>geom_node\_\*()</code> makes it clear that this layer will draw nodes.</p>

<p>The second reason is that it will save typing. Since <code>ggraph</code> are in control of the shape of the input data through the layout calculations, it knows that <em>x</em> and <em>y</em> position is encoded in an <code>x</code> and <code>y</code> column. This means that <code>geom_node\_\*</code> can default the x and y aesthetics so there's no need to type them:</p>

```{=html}
<pre class="r"><code>ggraph(gr, layout = &#39;kk&#39;) + 
    geom_node_point()</code></pre>
```
<p><img src="/post/2017-02-10-ggraph-introduction-nodes_files/figure-html/unnamed-chunk-4-1.png" width="672"/></p>

<p>sometimes there is a need for addressing the x and y aesthetics, which is still possible, for instance if a partition layout should be inverted:</p>

```{=html}
<pre class="r"><code>gr &lt;- graph_from_data_frame(flare$edges, vertices = flare$vertices)

ggraph(gr, layout = &#39;partition&#39;) + 
    geom_node_tile(aes(y = -y, fill = depth))</code></pre>
```
<p><img src="/post/2017-02-10-ggraph-introduction-nodes_files/figure-html/unnamed-chunk-5-1.png" width="672"/></p>

<p>of course this could also be accomplished by reversing the y-axis using <code>scale_y_reverse()</code> so this is just to illustrate that the defaults are easily overwritten if needed.</p>

<p>The third reason is for the added functionality. All <code>ggraph</code> geoms gets a <code>filter</code> aesthetic that allows you to quickly filter the input data. The use of this can be illustrated when plotting a tree:</p>

```{=html}
<pre class="r"><code>ggraph(gr, layout = &#39;dendrogram&#39;, circular = TRUE) + 
    geom_edge_diagonal() + 
    geom_node_point(aes(filter = leaf)) + 
    coord_fixed()</code></pre>
```
<p><img src="/post/2017-02-10-ggraph-introduction-nodes_files/figure-html/unnamed-chunk-6-1.png" width="672"/></p>

<p>In the above plot only the terminal nodes are drawn by filtering on the logical leaf column provided by the dendrogram layout.</p>
:::

::: {#the-different-node-geoms .section .level3}
<h3>The different node geoms</h3>

<p>The usual suspects are of course provided in the form of <code>geom_node_point()</code> (showcased above), <code>geom_node_text()</code>, and <code>geom_node_label()</code>. These works as expected, taking in the usual aesthetics (plus <em>filter</em>). Only x and y are defaulted so everything else must be provided e.g. label which does not defaults to the <code>name</code> column like is done in <code>igraph</code>. One feature sets <code>geom_node_text()</code> and <code>geom_node_label()</code> from their <code>ggplot2</code> counterparts: both have a <code>repel</code> argument that, when set to <code>TRUE</code> will use the repel functionality provided by the <a href="https://CRAN.R-project.org/package=ggrepel">ggrepel</a> package to avoid overlapping text.</p>

<p>Apart from these three geoms there's a set of geoms mainly useful for spatial node layouts such as treemaps, partition, and circle packing. <code>geom_node_tile()</code> is the <code>ggraph</code> counterpart to <code>ggplot2</code>s <code>geom_tile()</code> while <code>geom_node_circle()</code> and <code>geom_node_arc_bar()</code> maps to <code>ggforce</code>s <code>geom_circle()</code> and <code>geom_arc_bar()</code>. Collective for these is that the spatial dimensions of the geoms (e.g. radius, width, and height) are precalculated by their intended layouts and defaulted be the geoms:</p>

```{=html}
<pre class="r"><code>ggraph(gr, layout = &#39;treemap&#39;, weight = &#39;size&#39;) + 
    geom_node_tile(aes(fill = depth))</code></pre>
```
<p><img src="/post/2017-02-10-ggraph-introduction-nodes_files/figure-html/unnamed-chunk-7-1.png" width="672"/></p>

<p>all spatial node geoms will be center-based, meaning that the x and y value of the layout will refer to the center of the layout and not e.g. the bottom-left corner. This makes it easier to add labels to spatial layouts as well as using spatial layouts in a non-spatial way:</p>

```{=html}
<pre class="r"><code>l &lt;- ggraph(gr, layout = &#39;partition&#39;, circular = TRUE)
l + geom_node_arc_bar(aes(fill = depth)) + 
    coord_fixed()</code></pre>
```
<p><img src="/post/2017-02-10-ggraph-introduction-nodes_files/figure-html/unnamed-chunk-8-1.png" width="672"/></p>

```{=html}
<pre class="r"><code>l + geom_edge_diagonal(aes(width = ..index.., alpha = ..index..), lineend = &#39;round&#39;) + 
    scale_edge_width(range = c(0.2, 1.5)) + 
    geom_node_point(aes(colour = depth)) + 
    coord_fixed()</code></pre>
```
<p><img src="/post/2017-02-10-ggraph-introduction-nodes_files/figure-html/unnamed-chunk-9-1.png" width="672"/></p>

<p>More node geoms are sure to appear in <code>ggraph</code> with time but they will generally be quite easily comprehensible due to their strong assemblance to the standard <code>ggplot2</code> geoms. After all it is just points on a plane...</p>
:::

::: {#more-to-come .section .level3}
<h3>More to come</h3>

<p>This concludes our tour of the different ways to draw nodes in <code>ggraph</code>. Next up is edges and it is fair to say that this is where it really gets exciting. Stay tuned!</p>
:::

::: {#update .section .level3}
<h3>Update</h3>

<ul>

<li><a href="../2017-02-16-ggraph-introduction-edges">ggraph Introduction: Edges</a> has been published</li>

</ul>
:::
:::
