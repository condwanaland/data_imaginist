---
title: Insetting a new patchwork version
description: >
  A new version of patchwork has reached CRAN, read on to find out which new 
  features it brings...
date: '2020-11-09'
slug: insetting-a-new-patchwork-version
card-style: summary_large_image
image: /assets/img/patchwork_logo.png
categories:
  - package
  - announcement
  - patchwork
  - visualization
aliases: 
  - ../../2020/insetting-a-new-patchwork-version/index.html
---

```{=html}
<script src="/rmarkdown-libs/header-attrs/header-attrs.js"></script>
```
<p>I'm delighted to announce that a new version of patchwork has been released on CRAN. This new version contains both a bunch of small bug fixes as well as some prominent features which will be showcased below.</p>

<p>If you are unaware of patchwork, it is a package that allows easy composition of graphics, primarily aimed at ggplot2, but with support for base graphics as well. You can read more about the package on its <a href="https://patchwork.data-imaginist.com">website</a>.</p>

<p>For the remainder of this post we'll use the following plots as examples:</p>

```{=html}
<pre class="r"><code>library(ggplot2)
library(patchwork)
p1 &lt;- ggplot(mtcars) + 
  geom_point(aes(mpg, disp)) + 
  ggtitle(&#39;Plot 1&#39;)

p2 &lt;- ggplot(mtcars) + 
  geom_boxplot(aes(gear, disp, group = gear)) + 
  ggtitle(&#39;Plot 2&#39;)

p3 &lt;- ggplot(mtcars) + 
  geom_point(aes(hp, wt, colour = mpg)) + 
  ggtitle(&#39;Plot 3&#39;)</code></pre>
```
::: {#support-for-insets .section .level2}
<h2>Support for insets</h2>

<p>At it's inception patchwork was mainly designed to deal with alignment of plots displayed in a grid. This focus left out a small, but important for some, functionality for placing plots on top of each other. While it was possible to create a design with overlapping plots by combining different plotting areas:</p>

```{=html}
<pre class="r"><code>design &lt;- c(area(1, 1, 2, 2), area(2, 2, 3, 3), area(1, 3, 2, 4))
plot(design)</code></pre>
```
<p><img src="/post/2020-11-09-insetting-a-new-patchwork-version_files/figure-html/unnamed-chunk-2-1.png" width="672"/></p>

<p>...this would still enforce an underlying grid, something that would come at odds with freely positioning insets. To make up for this patchwork has now gained an <code>inset_element()</code> function, which marks the given graphics as an inset to be added to the preceding plot. The function allows you to specify the exact location of the edges of the inset in any grid unit you want, thus giving you full freedom of the placement:</p>

```{=html}
<pre class="r"><code>p1 + inset_element(p2, left = 0.5, bottom = 0.4, right = 0.9, top = 0.8)</code></pre>
```
<p><img src="/post/2020-11-09-insetting-a-new-patchwork-version_files/figure-html/unnamed-chunk-3-1.png" width="672"/></p>

<p>By default the positions use <code>npc</code> units which goes from 0 to 1 in the chosen area, other units can be used as well, by giving them explicitly:</p>

```{=html}
<pre class="r"><code>p1 + inset_element(p2, left = unit(1, &#39;cm&#39;), bottom = unit(30, &#39;pt&#39;), right = unit(3, &#39;in&#39;),
                   top = 0.8)</code></pre>
```
<p><img src="/post/2020-11-09-insetting-a-new-patchwork-version_files/figure-html/unnamed-chunk-4-1.png" width="672"/></p>

<p>The default is to position the inset relative to the panel, but this can be changed with the <code>align_to</code> argument:</p>

```{=html}
<pre class="r"><code>p1 + inset_element(p2, left = 0.5, bottom = 0.4, right = 1, top = 1, align_to = &#39;full&#39;)</code></pre>
```
<p><img src="/post/2020-11-09-insetting-a-new-patchwork-version_files/figure-html/unnamed-chunk-5-1.png" width="672"/></p>

<p>When it comes to all other functionality in patchwork, insets behaves as regular plots. This means that they are amenable to change after the composition:</p>

```{=html}
<pre class="r"><code>p_all &lt;- p1 + inset_element(p2, left = 0.5, bottom = 0.4, right = 1, top = 1) + p3
p_all[[2]] &lt;- p_all[[2]] + theme_classic()
p_all</code></pre>
```
<p><img src="/post/2020-11-09-insetting-a-new-patchwork-version_files/figure-html/unnamed-chunk-6-1.png" width="672"/></p>

```{=html}
<pre class="r"><code>p_all &amp; theme_dark()</code></pre>
```
<p><img src="/post/2020-11-09-insetting-a-new-patchwork-version_files/figure-html/unnamed-chunk-7-1.png" width="672"/></p>

<p>It can also get tagged automatically:</p>

```{=html}
<pre class="r"><code>p_all + plot_annotation(tag_levels = &#39;A&#39;)</code></pre>
```
<p><img src="/post/2020-11-09-insetting-a-new-patchwork-version_files/figure-html/unnamed-chunk-8-1.png" width="672"/></p>

<p>which can be turned off in the same manner as for <code>wrap_elements()</code>:</p>

```{=html}
<pre class="r"><code>p_all &lt;- p1 + 
  inset_element(p2, left = 0.5, bottom = 0.4, right = 1, top = 1, ignore_tag = TRUE) + 
  p3
p_all + plot_annotation(tag_levels = &#39;A&#39;)</code></pre>
```
<p><img src="/post/2020-11-09-insetting-a-new-patchwork-version_files/figure-html/unnamed-chunk-9-1.png" width="672"/></p>
:::

::: {#arbitrary-tagging-sequences .section .level2}
<h2>Arbitrary tagging sequences</h2>

<p>While we're discussing tagging, patchwork now allows you to provide your own sequence to use, instead of relying on the Latin character, Roman, or Arabic numerals that patchwork understands. This can be used by supplying a list of character vectors to the <code>tag_levels</code> argument instead of a single vector:</p>

```{=html}
<pre class="r"><code>p_all &lt;- p1 | (p2 / p3)
p_all + plot_annotation(tag_levels = list(c(&#39;one&#39;, &#39;two&#39;, &#39;three&#39;)))</code></pre>
```
<p><img src="/post/2020-11-09-insetting-a-new-patchwork-version_files/figure-html/unnamed-chunk-10-1.png" width="672"/></p>

<p>When working with multiple tagging levels, custom sequences can be mixed with the automatic ones:</p>

```{=html}
<pre class="r"><code>p_all[[2]] &lt;- p_all[[2]] + plot_layout(tag_level = &#39;new&#39;)
p_all + plot_annotation(tag_levels = list(c(&#39;one&#39;, &#39;two&#39;, &#39;three&#39;), &#39;a&#39;), tag_sep = &#39;-&#39;)</code></pre>
```
<p><img src="/post/2020-11-09-insetting-a-new-patchwork-version_files/figure-html/unnamed-chunk-11-1.png" width="672"/></p>
:::

::: {#raster-support .section .level2}
<h2>Raster support</h2>

<p>While patchwork was designed with ggplot2 in mind it has always supported additional graphic types such as grobs and base graphics (by using formula notation). This release adds support for an additional type: raster. The raster class (and nativeRaster class) are bitmap representation of images and they are now recognized directly and with the <code>wrap_elements()</code> function:</p>

```{=html}
<pre class="r"><code>logo &lt;- system.file(&#39;help&#39;, &#39;figures&#39;, &#39;logo.png&#39;, package = &#39;patchwork&#39;)
logo &lt;- png::readPNG(logo, native = TRUE)

p1 + logo</code></pre>
```
<p><img src="/post/2020-11-09-insetting-a-new-patchwork-version_files/figure-html/unnamed-chunk-12-1.png" width="672"/></p>

<p>Since they are implemented as wrapped elements they can still be titled etc:</p>

```{=html}
<pre class="r"><code>p1 + logo + ggtitle(&#39;Made with this:&#39;) + theme(plot.background = element_rect(&#39;grey&#39;))</code></pre>
```
<p><img src="/post/2020-11-09-insetting-a-new-patchwork-version_files/figure-html/unnamed-chunk-13-1.png" width="672"/></p>

<p>They can of course also be used with the new inset feature to easily add watermarks etc.</p>

```{=html}
<pre class="r"><code>p1 + inset_element(logo, 0.9, 0.8, 1, 1, align_to = &#39;full&#39;) + theme_void()</code></pre>
```
<p><img src="/post/2020-11-09-insetting-a-new-patchwork-version_files/figure-html/unnamed-chunk-14-1.png" width="672"/></p>
:::

::: {#the-future .section .level2}
<h2>The future</h2>

<p>That's it for this release. There are no shortage of feature requests for patchwork and I'll not make any promises, but I hope the next release will focus on adding support for gganimate as well as improvements to the annotation feature so that global axis labels can be added as well and annotations are kept in nested plots.</p>

<p>Stay safe!</p>
:::
