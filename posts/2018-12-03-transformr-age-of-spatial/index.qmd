---
title: 'transformr: Age of Spatial'
description: 'Wondering what powers the polygon transitions in gganimate? The package is `transformr` and it has just landed on CRAN'
date: '2018-12-09'
slug: transformr-age-of-spatial
categories:
  - animation
  - visualization
  - transformr
  - announcement
  - package
image: "/assets/img/transformr_logo_small.png"
aliases: 
  - ../../2018/transformr-age-of-spatial/index.html
---

<p><img src="/assets/img/transformr_logo_small.png" align="right" style="width:50%;max-width:200px;"/></p>

<p>Once again, I gives me great pleasure to announce a new package has joined CRAN. <code>transformr</code> is the spatial brother of <code>tweenr</code> and as with the <code>tweenr</code> update a few months ago, this package is very much driven by the infrastructural needs of <code>gganimate</code>. It is probably the last piece needed before I can begin preparing <code>gganimate</code> for CRAN, so if you are waiting for that there is indeed reason for celebration.</p>

::: {#becoming-spatial .section .level2}
<h2>Becoming Spatial</h2>

<p>As written above, <code>transformr</code> is <code>tweenr</code> for spatial data (spatial being used in a very broad sense as any data that is partly coordinates). To understand what this means we'll briefly have to touch on a core concept of <code>tweenr</code>. What is never said out loud, but generally implied, is that <code>tweenr</code> treats all columns of the data frame as independent. This is generally a sound principle as you don't want values from other columns to influence how e.g. the colour transitions between black and blue. As far as spatial is concerned, this approach also works fine as each row in the data frame encodes a single independent point in space or if there's a one-to-one mapping between points in a polygon. Alas, the devil's in the detail, and <code>tweenr</code> breaks down in magnificent ways if you try to tween between more complicated and heterogeneous shapes, e.g. a star and a circle. This is not something unique to <code>tweenr</code>, mind you, d3.js also has this limitation. The problems in d3 led <a href="https://github.com/veltman">Noah Veltman</a> to develop the <a href="https://github.com/veltman/flubber">flubber</a> javascript library. His reasons for developing it is succintly described in the animation below, grabbed from the readme of flubber</p>

<p><img src="https://user-images.githubusercontent.com/2120446/27014160-e0ce7c04-4ea7-11e7-8da4-5dde839290eb.gif"/></p>
:::

::: {#the-trials-of-the-polygon .section .level2}
<h2>The Trials of the Polygon</h2>

<p>So, what's the deal with polygons exactly. Why don't they just do as you expect them to and morph naturally from one to the other. That sad state of affair is that there are multiple reasons for that:</p>

<ol style="list-style-type: decimal">

<li>There might be discrepancy between the number of points that make up the two polygons. This may lead to part of the shape simply appearing or disappearing at the start or end of the tween.</li>

<li>The winding of the polygons may have a different angular offset and/or direction. This means that the tween will include rotatation and/or inversion, something that is often undesirable.</li>

<li>There may be a discrepancy in the number of polygons that make up the two shapes you tween between and/or a discrepancy between the number of holes. As with 1. this may lead to parts of the shapes suddenly appearing or disappearing during the tween.</li>

</ol>
:::

::: {#running-the-gauntlet .section .level2}
<h2>Running the Gauntlet</h2>

<p><code>transformr</code> tries to solve the three problems above in much the same way as flubber does, at least conceptually. There are enough differences between how Javascript and R (as well as d3 and <code>tweenr</code>) works with data, that I decided to only take the ideas behind flubber and implement them in my own way, in a manner fitting for R, rather than doing a direct port of the library. This means that you cannot expect the two libraries to behave equivalently. Below is, at a very high level, what <code>transformr</code> does to address the 3 problems outlined above:</p>

<ol style="list-style-type: decimal">

<li>Points are added along the edges of the shape with the fewest corners until the number of points matches between the shapes. Points are added so that long edges will be divided more often than short edges in order to even out the edge lengths of the final shape. Further, if any shape has fewer than a given number of corners, points will be added (following the same strategy) until the number of corners is reached.</li>

<li>After the number of points are evened out, the winding direction is matched between the shapes (as clockwise), and the last shape is rotated until the squared distance between point pairs of the two shapes is minimised.</li>

<li>This is adressed first (but is the least prevalent problem so it is mentioned last). If there are different number of polygons in the two states you wish to tween between, the polygons in the state with the fewest polygons is cut until the number matches. Once again, the cuts are distributed so that large polygons are cut more often than small. After the cutting, polygons between the states are matched by minimising distance and area difference. If there are differences in the number of holes in the matched polygons zero-area holes are inserted at the gravitational center of the polygon with the fewest holes until the number matches.</li>

</ol>
:::

::: {#the-ways-of-the-transformr .section .level2}
<h2>The Ways of the Transformr</h2>

<p>At this point we have only talked about shapes (and polygons), so let's get a bit more concrete. <code>transformr</code> currently recognises three data types: <em>polygons</em>, <em>paths</em>, and <em>simple features</em>. Polygons encompass simple polygons as well as polygons with any number of holes. Paths can be either single or multipaths. Simple features as implemented by the <code>sf</code> package are supported, currently covering the (multi)point, (multi)path, and (multi)polygon types.</p>

<p>In terms of tween type support, <code>transformr</code> currently extends the <code>tween_state()</code> API from <code>tweenr</code> but support for the other types of tweeners will be added with time.</p>
:::

::: {#some-examples .section .level2}
<h2>Some Examples</h2>

<p>At this point an example is probably in order. We'll start with what we first identified as a problematic case: morphing between a circle and a star:</p>

```{=html}
<pre class="r"><code>library(transformr)
library(ggplot2)

# Helpers included in transformer
circle &lt;- poly_circle()
star &lt;- poly_star()

# The data is a simple data.frame as you would feed into ggplot2
head(star)</code></pre>
```
```{=html}
<pre><code>##              x          y id
## 1 0.000000e+00  1.0000000  1
## 2 2.938926e-01  0.4045085  1
## 3 9.510565e-01  0.3090170  1
## 4 4.755283e-01 -0.1545085  1
## 5 5.877853e-01 -0.8090170  1
## 6 6.123234e-17 -0.5000000  1</code></pre>
```
```{=html}
<pre class="r"><code># We use tween_polygon to morph between the two
morph &lt;- tween_polygon(circle, star, 
                       ease = &#39;linear&#39;,
                       id = id,
                       nframes = 12)

# You get back a data.frame with the same special columns as with tweenr
head(morph)</code></pre>
```
```{=html}
<pre><code>##            x         y id .id .phase .frame
## 1 0.00000000 1.0000000  1   1    raw      1
## 2 0.01745241 0.9998477  1   1    raw      1
## 3 0.03489950 0.9993908  1   1    raw      1
## 4 0.05233596 0.9986295  1   1    raw      1
## 5 0.06975647 0.9975641  1   1    raw      1
## 6 0.08715574 0.9961947  1   1    raw      1</code></pre>
```
```{=html}
<pre class="r"><code># Let&#39;s see the result
ggplot(morph) + 
  geom_polygon(aes(x = x, y = y, group = id), fill = NA, colour = &#39;black&#39;) + 
  facet_wrap(~.frame, labeller = label_both, ncol = 3) + 
  theme_void()</code></pre>
```
<p><img src="/post/2018-12-03-transformr-age-of-spatial_files/figure-html/unnamed-chunk-2-1.png" width="672"/></p>

<p>What would happen if we upped the stakes a bit? Let's try with a star with a hole, morphing into three circles:</p>

```{=html}
<pre class="r"><code>circles &lt;- poly_circles()
star_hole &lt;- poly_star_hole()

morph &lt;- tween_polygon(circles, star_hole, 
                       ease = &#39;linear&#39;,
                       id = id, 
                       nframes = 12,
                       match = FALSE)

ggplot(morph) + 
  geom_polygon(aes(x = x, y = y, group = id), fill = NA, colour = &#39;black&#39;) + 
  facet_wrap(~.frame, labeller = label_both, ncol = 3) + 
  theme_void()</code></pre>
```
<p><img src="/post/2018-12-03-transformr-age-of-spatial_files/figure-html/unnamed-chunk-3-1.png" width="672"/></p>

<p>We introduced a new argument in <code>tween_polygon()</code> here. <code>match</code> is used to define whether polygons are matched by the value of <code>id</code> or whether all polygons in the first state should somehow morph into all polygons in the last state. If we set <code>match = TRUE</code>, we can use the <code>enter</code> and <code>exit</code> argument to define what should happen to unmatched polygons</p>

```{=html}
<pre class="r"><code>morph &lt;- tween_polygon(circles, star_hole, 
                       ease = &#39;linear&#39;,
                       id = id, 
                       nframes = 12,
                       match = TRUE,
                       exit = function(.x) transform(.x, x = mean(x), y = mean(y)))

ggplot(morph) + 
  geom_polygon(aes(x = x, y = y, group = id), fill = NA, colour = &#39;black&#39;) + 
  facet_wrap(~.frame, labeller = label_both, ncol = 3) + 
  theme_void()</code></pre>
```
<p><img src="/post/2018-12-03-transformr-age-of-spatial_files/figure-html/unnamed-chunk-4-1.png" width="672"/></p>

<p>You'll see a weird glitch above with the hole in the star reaching out to the edge, but this is simply <code>ggplot2</code> not knowing how to deal with holed polygons in <code>geom_polygon()</code> --- I'll handle that in another post...</p>

<p>What is not shown above is that <code>transformr</code> and <code>tween_polygon()</code> works well together with <code>keep_state()</code> from <code>tweenr</code> and that it is pipe-able, but if you are used to <code>tween_state()</code> this will all come natural...</p>

<p>While path and sf morphing works in much the same way as shown above, I'll quickly show case it for completeness:</p>

```{=html}
<pre class="r"><code>spiral &lt;- path_spiral()
waves &lt;- path_waves()

morph &lt;- tween_path(spiral, waves,
                    ease = &#39;linear&#39;,
                    nframes = 12, 
                    id = id,
                    match = FALSE)

ggplot(morph) + 
  geom_path(aes(x = x, y = y, group = id), colour = &#39;black&#39;) + 
  facet_wrap(~.frame, labeller = label_both, ncol = 3) + 
  theme_void()</code></pre>
```
<p><img src="/post/2018-12-03-transformr-age-of-spatial_files/figure-html/unnamed-chunk-5-1.png" width="672"/></p>

```{=html}
<pre class="r"><code>circle_st &lt;- sf::st_sf(geometry = sf::st_sfc(poly_circle(st = TRUE)))
north_carolina &lt;- sf::st_read(system.file(&quot;shape/nc.shp&quot;, package = &quot;sf&quot;), 
                              quiet = TRUE)
north_carolina &lt;- st_normalize(sf::st_combine(north_carolina))
north_carolina &lt;- sf::st_sf(geometry = sf::st_sfc(north_carolina))

morph &lt;- tween_sf(north_carolina, circle_st,
                  ease = &#39;linear&#39;,
                  nframes = 12)

ggplot(morph) + 
  geom_sf(aes(geometry = geometry), colour = &#39;white&#39;, fill = &#39;black&#39;, size = .1) + 
  facet_wrap(~.frame, labeller = label_both, ncol = 3) + 
  coord_sf(datum = NULL) + 
  theme_void()</code></pre>
```
<p><img src="/post/2018-12-03-transformr-age-of-spatial_files/figure-html/unnamed-chunk-6-1.png" width="672"/></p>

<p>As can be seen, <code>transformr</code> can handle most of the things you choose to to throw at it, when it comes to morphing between different shapes. It is used under the hood in <code>gganimate</code> to power polygon, path, and sf geom transitions (and derivatives thereof), but can just as well be used directly in the same way as <code>tweenr</code> can...</p>

<p>I do hope you'll enjoy <code>transformr</code> either simply through the magic of <code>gganimate</code> or by playing with it directly --- the results can be quite mesmerizing...</p>
:::
